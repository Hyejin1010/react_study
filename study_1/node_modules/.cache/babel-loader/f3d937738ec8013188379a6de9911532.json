{"ast":null,"code":"var _jsxFileName = \"/Users/hyejin/Desktop/project/react_study/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport TOC from './components/TOC';\nimport Subject from './components/Subject';\nimport Content from './components/Content';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    console.log('chloe test construcor');\n    /**\n     * react에서는 state의 값이 바뀌면, \n     * 그 state를 가지고 있는 컴포넌트의 render함수가 다시 호출된다.\n     * 그 render함수가 다시 호출됨에 따라 하위 컴포넌트들도 다시 호출된다.\n     * ==> 화면이 다시 그려진다.\n     */\n\n    this.state = {\n      mode: 'read',\n      selected_content_id: 2,\n      subject: {\n        title: 'WEB',\n        sub: 'world wide web!'\n      },\n      welcome: {\n        title: 'Welcome',\n        desc: 'Hello, React!!'\n      },\n      contents: [{\n        id: 1,\n        title: 'HTML',\n        desc: 'HTML is for information'\n      }, {\n        id: 2,\n        title: 'CSS',\n        desc: 'Css is for design'\n      }, {\n        id: 3,\n        title: 'JavaScript',\n        desc: 'HTML is for interactive'\n      }]\n    };\n  }\n  /*\n  어떤 HTML을 그릴 것인가를 결정하는 함수\n   반드시 react는 하나의 태그 안 쪽에 나머지 태그들이 있어야 한다.\n   --> 가장 바깥 쪽에는 태그 하나가 있어야 한다. = 없으면 error가 남\n  */\n\n\n  render() {\n    var _title,\n        _desc = null;\n\n    if (this.state.mode === 'welcome') {\n      _title = this.state.welcome.title;\n      _desc = this.state.welcome.desc;\n    } else if (this.state.mode === 'read') {\n      var data = this.state.contents.find(content => content.id === this.state.selected_content_id);\n      _title = data.title;\n      _desc = data.desc;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Subject, {\n      title: this.state.subject.title,\n      sub: this.state.subject.sub,\n      onChangePage: function () {\n        /**\n         * 왜 직접 변경하지 않고 setState로 하는가?\n         * contructor에서 직접 변경 가능\n         * \n         * 이유: 직접 바꾸면 react입장에서는 몰래 바꾸는 것과 같다. 바꾼 걸 알 수가 없음.\n         */\n        this.setState({\n          mode: 'welcome'\n        });\n        /** this: render함수가 속해있는 그 컴포넌트 자신을 가리킨다.\n        * \n        * event 함수 내에서는 this값이 없다.\n        * -> 주입하는 방법? .bind(해당 함수 내 this값으로 주고 싶은 것)\n        */\n      }.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, this.state.subject.sub), React.createElement(TOC, {\n      data: this.state.contents,\n      onChangePage: function (id) {\n        this.setState({\n          mode: 'read'\n        });\n      }.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(Content, {\n      title: _title,\n      desc: _desc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/hyejin/Desktop/project/react_study/src/App.js"],"names":["React","Component","TOC","Subject","Content","App","constructor","props","console","log","state","mode","selected_content_id","subject","title","sub","welcome","desc","contents","id","render","_title","_desc","data","find","content","setState","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport TOC from './components/TOC';\nimport Subject from './components/Subject';\nimport Content from './components/Content';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    console.log('chloe test construcor');\n\n    /**\n     * react에서는 state의 값이 바뀌면, \n     * 그 state를 가지고 있는 컴포넌트의 render함수가 다시 호출된다.\n     * 그 render함수가 다시 호출됨에 따라 하위 컴포넌트들도 다시 호출된다.\n     * ==> 화면이 다시 그려진다.\n     */\n    this.state = {\n      mode: 'read',\n      selected_content_id: 2,\n      subject: {\n        title: 'WEB',\n        sub: 'world wide web!'\n      },\n      welcome: {\n        title: 'Welcome',\n        desc: 'Hello, React!!'\n      },\n      contents: [\n        { id: 1, title: 'HTML', desc: 'HTML is for information' },\n        { id: 2, title: 'CSS', desc: 'Css is for design' },\n        { id: 3, title: 'JavaScript', desc: 'HTML is for interactive' }\n      ]\n    }\n  }\n\n  /*\n  어떤 HTML을 그릴 것인가를 결정하는 함수\n\n  반드시 react는 하나의 태그 안 쪽에 나머지 태그들이 있어야 한다.\n   --> 가장 바깥 쪽에는 태그 하나가 있어야 한다. = 없으면 error가 남\n  */\n  render() {\n    var _title, _desc = null;\n\n    if (this.state.mode === 'welcome') {\n      _title = this.state.welcome.title;\n      _desc = this.state.welcome.desc;\n    } else if (this.state.mode === 'read') {\n      var data = this.state.contents.find(content => content.id === this.state.selected_content_id);\n      _title = data.title;\n      _desc = data.desc;\n    }\n\n    return (\n      <div className=\"App\">\n        <Subject \n          title={this.state.subject.title} \n          sub={this.state.subject.sub}\n          onChangePage={function() {\n            /**\n             * 왜 직접 변경하지 않고 setState로 하는가?\n             * contructor에서 직접 변경 가능\n             * \n             * 이유: 직접 바꾸면 react입장에서는 몰래 바꾸는 것과 같다. 바꾼 걸 알 수가 없음.\n             */\n            this.setState({ mode: 'welcome' });\n             /** this: render함수가 속해있는 그 컴포넌트 자신을 가리킨다.\n             * \n             * event 함수 내에서는 this값이 없다.\n             * -> 주입하는 방법? .bind(해당 함수 내 this값으로 주고 싶은 것)\n             */\n          }.bind(this)}></Subject>\n        <header>\n          {this.state.subject.sub}\n        </header>\n        <TOC data={this.state.contents} onChangePage={function(id) {\n          this.setState({\n            mode: 'read'\n          });\n        }.bind(this)}></TOC>\n        <Content title={_title} desc={_desc}></Content>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}